// Code generated by go run gen.go; DO NOT EDIT.
package fields_test

import "testing"

type s0 struct {
	x0 float64
}

func (s s0) addv(ss s0) s0 {
	return s0{
		s.x0 + ss.x0,
	}
}

func (s *s0) addp(ss *s0) *s0 {
	s.x0 = s.x0 + ss.x0
	return s
}

type s1 struct {
	x0 float64
	x1 float64
}

func (s s1) addv(ss s1) s1 {
	return s1{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
	}
}

func (s *s1) addp(ss *s1) *s1 {
	s.x0, s.x1 = s.x0+ss.x0, s.x1+ss.x1
	return s
}

type s2 struct {
	x0 float64
	x1 float64
	x2 float64
}

func (s s2) addv(ss s2) s2 {
	return s2{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
	}
}

func (s *s2) addp(ss *s2) *s2 {
	s.x0, s.x1, s.x2 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2
	return s
}

type s3 struct {
	x0 float64
	x1 float64
	x2 float64
	x3 float64
}

func (s s3) addv(ss s3) s3 {
	return s3{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
		s.x3 + ss.x3,
	}
}

func (s *s3) addp(ss *s3) *s3 {
	s.x0, s.x1, s.x2, s.x3 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2, s.x3+ss.x3
	return s
}

type s4 struct {
	x0 float64
	x1 float64
	x2 float64
	x3 float64
	x4 float64
}

func (s s4) addv(ss s4) s4 {
	return s4{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
		s.x3 + ss.x3,
		s.x4 + ss.x4,
	}
}

func (s *s4) addp(ss *s4) *s4 {
	s.x0, s.x1, s.x2, s.x3, s.x4 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2, s.x3+ss.x3, s.x4+ss.x4
	return s
}

type s5 struct {
	x0 float64
	x1 float64
	x2 float64
	x3 float64
	x4 float64
	x5 float64
}

func (s s5) addv(ss s5) s5 {
	return s5{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
		s.x3 + ss.x3,
		s.x4 + ss.x4,
		s.x5 + ss.x5,
	}
}

func (s *s5) addp(ss *s5) *s5 {
	s.x0, s.x1, s.x2, s.x3, s.x4, s.x5 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2, s.x3+ss.x3, s.x4+ss.x4, s.x5+ss.x5
	return s
}

type s6 struct {
	x0 float64
	x1 float64
	x2 float64
	x3 float64
	x4 float64
	x5 float64
	x6 float64
}

func (s s6) addv(ss s6) s6 {
	return s6{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
		s.x3 + ss.x3,
		s.x4 + ss.x4,
		s.x5 + ss.x5,
		s.x6 + ss.x6,
	}
}

func (s *s6) addp(ss *s6) *s6 {
	s.x0, s.x1, s.x2, s.x3, s.x4, s.x5, s.x6 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2, s.x3+ss.x3, s.x4+ss.x4, s.x5+ss.x5, s.x6+ss.x6
	return s
}

type s7 struct {
	x0 float64
	x1 float64
	x2 float64
	x3 float64
	x4 float64
	x5 float64
	x6 float64
	x7 float64
}

func (s s7) addv(ss s7) s7 {
	return s7{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
		s.x3 + ss.x3,
		s.x4 + ss.x4,
		s.x5 + ss.x5,
		s.x6 + ss.x6,
		s.x7 + ss.x7,
	}
}

func (s *s7) addp(ss *s7) *s7 {
	s.x0, s.x1, s.x2, s.x3, s.x4, s.x5, s.x6, s.x7 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2, s.x3+ss.x3, s.x4+ss.x4, s.x5+ss.x5, s.x6+ss.x6, s.x7+ss.x7
	return s
}

type s8 struct {
	x0 float64
	x1 float64
	x2 float64
	x3 float64
	x4 float64
	x5 float64
	x6 float64
	x7 float64
	x8 float64
}

func (s s8) addv(ss s8) s8 {
	return s8{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
		s.x3 + ss.x3,
		s.x4 + ss.x4,
		s.x5 + ss.x5,
		s.x6 + ss.x6,
		s.x7 + ss.x7,
		s.x8 + ss.x8,
	}
}

func (s *s8) addp(ss *s8) *s8 {
	s.x0, s.x1, s.x2, s.x3, s.x4, s.x5, s.x6, s.x7, s.x8 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2, s.x3+ss.x3, s.x4+ss.x4, s.x5+ss.x5, s.x6+ss.x6, s.x7+ss.x7, s.x8+ss.x8
	return s
}

type s9 struct {
	x0 float64
	x1 float64
	x2 float64
	x3 float64
	x4 float64
	x5 float64
	x6 float64
	x7 float64
	x8 float64
	x9 float64
}

func (s s9) addv(ss s9) s9 {
	return s9{
		s.x0 + ss.x0,
		s.x1 + ss.x1,
		s.x2 + ss.x2,
		s.x3 + ss.x3,
		s.x4 + ss.x4,
		s.x5 + ss.x5,
		s.x6 + ss.x6,
		s.x7 + ss.x7,
		s.x8 + ss.x8,
		s.x9 + ss.x9,
	}
}

func (s *s9) addp(ss *s9) *s9 {
	s.x0, s.x1, s.x2, s.x3, s.x4, s.x5, s.x6, s.x7, s.x8, s.x9 = s.x0+ss.x0, s.x1+ss.x1, s.x2+ss.x2, s.x3+ss.x3, s.x4+ss.x4, s.x5+ss.x5, s.x6+ss.x6, s.x7+ss.x7, s.x8+ss.x8, s.x9+ss.x9
	return s
}
func BenchmarkVec(b *testing.B) {
	b.Run("addv-s0", func(b *testing.B) {
		v1 := s0{0}
		v2 := s0{0}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s0", func(b *testing.B) {
		v1 := &s0{0}
		v2 := &s0{0}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s1", func(b *testing.B) {
		v1 := s1{0, 1}
		v2 := s1{1, 2}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s1", func(b *testing.B) {
		v1 := &s1{0, 1}
		v2 := &s1{1, 2}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s2", func(b *testing.B) {
		v1 := s2{0, 1, 2}
		v2 := s2{2, 3, 4}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s2", func(b *testing.B) {
		v1 := &s2{0, 1, 2}
		v2 := &s2{2, 3, 4}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s3", func(b *testing.B) {
		v1 := s3{0, 1, 2, 3}
		v2 := s3{3, 4, 5, 6}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s3", func(b *testing.B) {
		v1 := &s3{0, 1, 2, 3}
		v2 := &s3{3, 4, 5, 6}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s4", func(b *testing.B) {
		v1 := s4{0, 1, 2, 3, 4}
		v2 := s4{4, 5, 6, 7, 8}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s4", func(b *testing.B) {
		v1 := &s4{0, 1, 2, 3, 4}
		v2 := &s4{4, 5, 6, 7, 8}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s5", func(b *testing.B) {
		v1 := s5{0, 1, 2, 3, 4, 5}
		v2 := s5{5, 6, 7, 8, 9, 10}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s5", func(b *testing.B) {
		v1 := &s5{0, 1, 2, 3, 4, 5}
		v2 := &s5{5, 6, 7, 8, 9, 10}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s6", func(b *testing.B) {
		v1 := s6{0, 1, 2, 3, 4, 5, 6}
		v2 := s6{6, 7, 8, 9, 10, 11, 12}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s6", func(b *testing.B) {
		v1 := &s6{0, 1, 2, 3, 4, 5, 6}
		v2 := &s6{6, 7, 8, 9, 10, 11, 12}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s7", func(b *testing.B) {
		v1 := s7{0, 1, 2, 3, 4, 5, 6, 7}
		v2 := s7{7, 8, 9, 10, 11, 12, 13, 14}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s7", func(b *testing.B) {
		v1 := &s7{0, 1, 2, 3, 4, 5, 6, 7}
		v2 := &s7{7, 8, 9, 10, 11, 12, 13, 14}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s8", func(b *testing.B) {
		v1 := s8{0, 1, 2, 3, 4, 5, 6, 7, 8}
		v2 := s8{8, 9, 10, 11, 12, 13, 14, 15, 16}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s8", func(b *testing.B) {
		v1 := &s8{0, 1, 2, 3, 4, 5, 6, 7, 8}
		v2 := &s8{8, 9, 10, 11, 12, 13, 14, 15, 16}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})

	b.Run("addv-s9", func(b *testing.B) {
		v1 := s9{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
		v2 := s9{9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addv(v2)
			} else {
				v2 = v2.addv(v1)
			}
		}
	})
	b.Run("addp-s9", func(b *testing.B) {
		v1 := &s9{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
		v2 := &s9{9, 10, 11, 12, 13, 14, 15, 16, 17, 18}
		b.ResetTimer()
		for i := 0; i < b.N; i++ {
			if i%2 == 0 {
				v1 = v1.addp(v2)
			} else {
				v2 = v2.addp(v1)
			}
		}
	})
}
